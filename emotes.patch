 db/cash_emotes_db.yml                        | 163 ++++++++++
 src/map/clif.cpp                             | 110 ++++++-
 src/map/clif.hpp                             |  31 ++
 src/map/clif_packetdb.hpp                    |  10 +
 src/map/emotes.cpp                           | 324 +++++++++++++++++++
 src/map/emotes.hpp                           |  76 +++++
 src/map/map-server-generator.vcxproj         |   2 +
 src/map/map-server-generator.vcxproj.filters |   8 +-
 src/map/map-server.vcxproj                   |   2 +
 src/map/map-server.vcxproj.filters           |   8 +-
 src/map/map.cpp                              |   3 +
 src/map/packets_struct.hpp                   |  71 ++++
 src/map/script_constants.hpp                 |  20 ++
 13 files changed, 825 insertions(+), 3 deletions(-)
 create mode 100644 db/cash_emotes_db.yml
 create mode 100644 src/map/emotes.cpp
 create mode 100644 src/map/emotes.hpp

diff --git a/db/cash_emotes_db.yml b/db/cash_emotes_db.yml
new file mode 100644
index 0000000000..d75e553a65
--- /dev/null
+++ b/db/cash_emotes_db.yml
@@ -0,0 +1,163 @@
+#####################################################################################
+# Cash Emotiocons Database
+#####################################################################################
+#
+# Cash Emotes
+#
+#####################################################################################
+# - PackId                     The id of the pack
+#   PackType                   1: account bound, 2: char bound
+#   PackPrice                  How many nyang fruit needed to purshase the pack (6909 is hardcoded in the client)
+#   SaleStart                  The starting time for the pack to be sold in the fomat YYYYMMDD
+#   SaleEnd                    The ending time for the pack to be sold in the fomat YYYYMMDD
+#   RentalPeriod               The durration of usability the pack has once purshased in days, 0 for unlimited
+#   EmotesList                 The list of emotes belonging to the pack
+######################################################################################
+Header:
+  Type: CASH_EMOTES_DB
+  Version: 1
+Body:
+  - PackId: 0
+    PackType: 1
+    PackPrice: 0
+    SaleStart: 0
+    SaleEnd: 0
+    RentalPeriod: 0
+    EmotesList:
+      - ET_SURPRISE
+      - ET_QUESTION
+      - ET_DELIGHT
+      - ET_THROB
+      - ET_BIGTHROB
+      - ET_SWEAT
+      - ET_AHA
+      - ET_FRET
+      - ET_ANGER
+      - ET_MONEY
+      - ET_THINK
+      - ET_ROCK
+      - ET_SCISSOR
+      - ET_WRAP
+      - ET_THANKS
+      - ET_KEK
+      - ET_SORRY
+      - ET_SMILE
+      - ET_PROFUSELY_SWEAT
+      - ET_SCRATCH
+      - ET_BEST
+      - ET_STARE_ABOUT
+      - ET_HUK
+      - ET_O
+      - ET_X
+      - ET_HELP
+      - ET_GO
+      - ET_CRY
+      - ET_KIK
+      - ET_CHUP
+      - ET_CHUPCHUP
+      - ET_HNG
+      - ET_OK
+      - ET_STARE
+      - ET_HUNGRY
+      - ET_COOL
+      - ET_MERONG
+      - ET_SHY
+      - ET_GOODBOY
+      - ET_SPTIME
+      - ET_SEXY
+      - ET_COMEON
+      - ET_SLEEPY
+      - ET_CONGRATULATION
+      - ET_HPTIME
+      - ET_SPARK
+      - ET_CONFUSE
+      - ET_OHNO
+      - ET_HUM
+      - ET_BLABLA
+      - ET_OTL
+      - ET_LUV
+      - ET_MOBILE
+      - ET_MAIL
+      - ET_ANTENNA1
+      - ET_ANTENNA2
+      - ET_ANTENNA3
+      - ET_HUM2
+      - ET_ABS
+      - ET_OOPS
+      - ET_SPIT
+      - ET_ENE
+      - ET_PANIC
+      - ET_WHISP
+      - ET_FLAG
+      - ET_INDONESIA_FLAG
+      - ET_PH_FLAG
+      - ET_MY_FLAG
+      - ET_SI_FLAG
+      - ET_BR_FLAG
+      - ET_INDIA_FLAG
+      - ET_FLAG8
+      - ET_FLAG9
+      - ET_DICE1
+      - ET_DICE2
+      - ET_DICE3
+      - ET_DICE4
+      - ET_DICE5
+      - ET_DICE6
+      - ET_YUT1
+      - ET_YUT2
+      - ET_YUT3
+      - ET_YUT4
+      - ET_YUT5
+      - ET_YUT6
+      - ET_YUT7
+  - PackId: 1
+    PackType: 1
+    PackPrice: 0
+    SaleStart: 20230802
+    SaleEnd: 20230830
+    RentalPeriod: 0
+    EmotesList:
+      - ET_KIK
+      - ET_GO
+      - ET_COOL
+      - ET_SPARK
+      - ET_QUESTION
+      - ET_CUSTOM_1
+      - ET_CUSTOM_2
+      - ET_CUSTOM_3
+      - ET_CUSTOM_4
+      - ET_CUSTOM_5
+  - PackId: 2
+    PackType: 1
+    PackPrice: 10
+    SaleStart: 20230810
+    SaleEnd: 0
+    RentalPeriod: 0
+    EmotesList:
+      - ET_THANKS
+      - ET_AHA
+      - ET_OK
+      - ET_HUNGRY
+      - ET_SURPRISE
+      - ET_QUESTION
+      - ET_DELIGHT
+      - ET_SCISSOR
+      - ET_ROCK
+      - ET_WRAP
+  - PackId: 3
+    PackType: 1
+    PackPrice: 10
+    SaleStart: 20231101
+    SaleEnd: 0
+    RentalPeriod: 0
+    EmotesList:
+      - ET_SEXY
+      - ET_MERONG
+      - ET_SHY
+      - ET_COMEON
+      - ET_HUNGRY
+      - ET_SPTIME
+      - ET_HPTIME
+      - ET_BIGTHROB
+      - ET_SWEAT
+      - ET_BLABLA
diff --git a/src/map/clif.cpp b/src/map/clif.cpp
index df6d90f914..6a7d671f71 100644
--- a/src/map/clif.cpp
+++ b/src/map/clif.cpp
@@ -35,6 +35,7 @@
 #include "clan.hpp"
 #include "clif.hpp"
 #include "elemental.hpp"
+#include "emotes.hpp"
 #include "guild.hpp"
 #include "homunculus.hpp"
 #include "instance.hpp"
@@ -47,8 +48,8 @@
 #include "mob.hpp"
 #include "npc.hpp"
 #include "party.hpp"
-#include "pc.hpp"
 #include "pc_groups.hpp"
+#include "pc.hpp"
 #include "pet.hpp"
 #include "quest.hpp"
 #include "script.hpp"
@@ -9338,6 +9339,9 @@ void clif_guild_broken(struct map_session_data *sd,int flag)
 ///     enum emotion_type
 void clif_emotion(struct block_list *bl,int type)
 {
+#if PACKETVER >= 20230802
+	clif_emotion_success(bl, 0, type);
+#else
 	unsigned char buf[8];
 
 	nullpo_retv(bl);
@@ -9346,6 +9350,7 @@ void clif_emotion(struct block_list *bl,int type)
 	WBUFL(buf,2)=bl->id;
 	WBUFB(buf,6)=type;
 	clif_send(buf,packet_len(0xc0),bl,AREA);
+#endif
 }
 
 
@@ -10903,6 +10908,8 @@ void clif_parse_LoadEndAck(int fd,struct map_session_data *sd)
 			clif_status_load(&sd->bl, EFST_SKE, 1);
 		}
 
+		emotes_get_player_packs(sd);
+
 		// Notify everyone that this char logged in [Skotlex].
 		map_foreachpc(clif_friendslist_toggle_sub, sd->status.account_id, sd->status.char_id, 1);
 
@@ -11540,6 +11547,7 @@ void clif_parse_ChangeDir(int fd, struct map_session_data *sd)
 ///     @see enum emotion_type
 void clif_parse_Emotion(int fd, struct map_session_data *sd)
 {
+#if PACKETVER < 20230802
 	int emoticon = RFIFOB(fd,packet_db[RFIFOW(fd,0)].pos[0]);
 
 	if (battle_config.basic_skill_check == 0 || pc_checkskill(sd, NV_BASIC) >= 2 || pc_checkskill(sd, SU_BASIC_SKILL) >= 1) {
@@ -11574,6 +11582,7 @@ void clif_parse_Emotion(int fd, struct map_session_data *sd)
 		clif_emotion(&sd->bl, emoticon);
 	} else
 		clif_skill_fail(sd, 1, USESKILL_FAIL_LEVEL, 1);
+#endif
 }
 
 
@@ -24798,6 +24807,105 @@ void clif_macro_reporter_status(map_session_data &sd, e_macro_report_status styp
 #endif
 }
 
+void clif_parse_emotion2(int fd, map_session_data *sd)
+{
+#if PACKETVER >= 20230802
+	nullpo_retv(sd);
+	const struct PACKET_CZ_REQ_EMOTION2 *p = (PACKET_CZ_REQ_EMOTION2 *)RFIFOP(fd, 0);
+	emotes_use(sd, p->packId, p->emoteId);
+#endif
+}
+
+void clif_parse_emotion_expansion_request(int fd, map_session_data *sd)
+{
+#if PACKETVER >= 20230802
+	nullpo_retv(sd);
+	const struct PACKET_CZ_EMOTION_EXPANTION_REQ *p = (PACKET_CZ_EMOTION_EXPANTION_REQ *)RFIFOP(fd, 0);
+	emotes_expantion_buy(sd, p->packId, p->itemId, p->amount);
+#endif
+}
+
+void clif_emotion_success(struct block_list *bl, int16 packId, int16 emoteId)
+{
+#if PACKETVER >= 20230802
+	nullpo_retv(bl);
+
+	struct PACKET_ZC_EMOTION_SUCCESS p = { 0 };
+	p.packetType = HEADER_ZC_EMOTION_SUCCESS;
+	p.GID = bl->id;
+	p.packId = packId;
+	p.emoteId = emoteId;
+	clif_send(&p, sizeof(p), bl, AREA);
+#endif
+}
+
+void clif_emotion_fail(map_session_data *sd, int16 packId, int16 emoteId, enum emote_msg status)
+{
+#if PACKETVER >= 20230802
+	nullpo_retv(sd);
+
+	const int fd = sd->fd;
+	WFIFOHEAD(fd, sizeof(struct PACKET_ZC_EMOTION_FAIL));
+	struct PACKET_ZC_EMOTION_FAIL *p = (PACKET_ZC_EMOTION_FAIL *)WFIFOP(fd, 0);
+	p->packetType = HEADER_ZC_EMOTION_FAIL;
+	p->packId = packId;
+	p->emoteId = emoteId;
+	p->status = status;
+	WFIFOSET(fd, sizeof(struct PACKET_ZC_EMOTION_FAIL));
+#endif
+}
+
+void clif_emotion_expansion_response_success(map_session_data *sd, int16 packId, int8 isRented, uint32 RentEndTime)
+{
+#if PACKETVER >= 20230802
+	nullpo_retv(sd);
+
+	const int fd = sd->fd;
+	WFIFOHEAD(fd, sizeof(struct PACKET_ZC_EMOTION_EXPANSION_SUCCESS));
+	struct PACKET_ZC_EMOTION_EXPANSION_SUCCESS *p = (PACKET_ZC_EMOTION_EXPANSION_SUCCESS *)WFIFOP(fd, 0);
+	p->packetType = HEADER_ZC_EMOTION_EXPANSION_SUCCESS;
+	p->packId = packId;
+	p->isRented = isRented;
+	p->timestamp = RentEndTime; // rental end time, 0 for permanent
+	WFIFOSET(fd, sizeof(struct PACKET_ZC_EMOTION_EXPANSION_SUCCESS));
+#endif
+}
+
+void clif_emotion_expansion_response_fail(map_session_data *sd, int16 packId, enum emotion_expansion_msg status)
+{
+#if PACKETVER >= 20230802
+	nullpo_retv(sd);
+
+	const int fd = sd->fd;
+	WFIFOHEAD(fd, sizeof(struct PACKET_ZC_EMOTION_EXPANSION_FAIL));
+	struct PACKET_ZC_EMOTION_EXPANSION_FAIL *p = (PACKET_ZC_EMOTION_EXPANSION_FAIL *)WFIFOP(fd, 0);
+	p->packetType = HEADER_ZC_EMOTION_EXPANSION_FAIL;
+	p->packId = packId;
+	p->status = status;
+	WFIFOSET(fd, sizeof(struct PACKET_ZC_EMOTION_EXPANSION_FAIL));
+#endif
+}
+
+void clif_emotion_expansion_list(map_session_data *sd, std::vector<struct PACKET_ZC_EMOTION_EXPANTION_LIST_sub> &list)
+{
+#if PACKETVER >= 20230802
+	nullpo_retv(sd);
+
+	const int fd = sd->fd;
+	WFIFOHEAD(fd, sizeof(struct PACKET_ZC_EMOTION_EXPANTION_LIST) + sizeof(struct PACKET_ZC_EMOTION_EXPANTION_LIST_sub) * list.size());
+	struct PACKET_ZC_EMOTION_EXPANTION_LIST *p = (PACKET_ZC_EMOTION_EXPANTION_LIST *)WFIFOP(fd, 0);
+	p->packetType = HEADER_ZC_EMOTION_EXPANTION_LIST;
+	p->timestamp = time(NULL);
+#if PACKETVER >= 20230920
+	p->timezone = 60 * 9; // kRO UTC+9 = 540
+#endif
+	for (auto i = 0; i < list.size(); ++i)
+		p->list[i] = list[i];
+	p->packetLength = sizeof(struct PACKET_ZC_EMOTION_EXPANTION_LIST) + sizeof(struct PACKET_ZC_EMOTION_EXPANTION_LIST_sub) * list.size();
+	WFIFOSET(fd, p->packetLength);
+#endif
+}
+
 /*==========================================
  * Main client packet processing function
  *------------------------------------------*/
diff --git a/src/map/clif.hpp b/src/map/clif.hpp
index dd35c867f7..339df4df1c 100644
--- a/src/map/clif.hpp
+++ b/src/map/clif.hpp
@@ -50,6 +50,9 @@ struct s_laphine_upgrade;
 struct s_captcha_data;
 enum e_macro_detect_status : uint8;
 enum e_macro_report_status : uint8;
+enum emote_msg : int8;
+enum emotion_expansion_msg : int8;
+struct PACKET_ZC_EMOTION_EXPANTION_LIST_sub;
 
 enum e_PacketDBVersion { // packet DB
 	MIN_PACKET_DB  = 0x064,
@@ -342,6 +345,26 @@ enum emotion_type {
 	ET_YUT5,
 	ET_YUT6,
 	ET_YUT7,
+	ET_CLICK_ME,
+	ET_DAILY_QUEST,
+	ET_EVENT,
+	ET_JOB_QUEST,
+	ET_TRAFFIC_LINE_QUEST,
+	ET_CUSTOM_1,
+	ET_CUSTOM_2,
+	ET_CUSTOM_3,
+	ET_CUSTOM_4,
+	ET_CUSTOM_5,
+	ET_CUSTOM_6,
+	ET_CUSTOM_7,
+	ET_CUSTOM_8,
+	ET_CUSTOM_9,
+	ET_CUSTOM_10,
+	ET_CUSTOM_11,
+	ET_CUSTOM_12,
+	ET_CUSTOM_13,
+	ET_CUSTOM_14,
+	ET_CUSTOM_15,
 	//
 	ET_MAX
 };
@@ -1227,4 +1250,12 @@ void clif_macro_detector_status(map_session_data &sd, e_macro_detect_status styp
 void clif_macro_reporter_select(map_session_data &sd, const std::vector<uint32> &aid_list);
 void clif_macro_reporter_status(map_session_data &sd, e_macro_report_status stype);
 
+void clif_parse_emotion2(int fd, map_session_data *sd);
+void clif_parse_emotion_expansion_request(int fd, map_session_data *sd);
+void clif_emotion_success(struct block_list *bl, int16 packId, int16 emoteId);
+void clif_emotion_fail(map_session_data *sd, int16 packId, int16 emoteId, enum emote_msg status);
+void clif_emotion_expansion_response_success(map_session_data *sd, int16 packId, int8 isRented, uint32 RentEndTime);
+void clif_emotion_expansion_response_fail(map_session_data *sd, int16 packId, enum emotion_expansion_msg status);
+void clif_emotion_expansion_list(map_session_data *sd, std::vector<struct PACKET_ZC_EMOTION_EXPANTION_LIST_sub> &list);
+
 #endif /* CLIF_HPP */
diff --git a/src/map/clif_packetdb.hpp b/src/map/clif_packetdb.hpp
index e2ae5ab061..b9f97951d5 100644
--- a/src/map/clif_packetdb.hpp
+++ b/src/map/clif_packetdb.hpp
@@ -2438,4 +2438,14 @@
 	parseable_packet( HEADER_CZ_USE_PACKAGEITEM, sizeof( struct PACKET_CZ_USE_PACKAGEITEM ), clif_parse_itempackage_select, 0 );
 #endif
 
+#if PACKETVER >= 20230802
+	parseable_packet(HEADER_CZ_REQ_EMOTION2, sizeof(struct PACKET_CZ_REQ_EMOTION2), clif_parse_emotion2, 0);
+	packet(HEADER_ZC_EMOTION_SUCCESS, sizeof(struct PACKET_ZC_EMOTION_SUCCESS));
+	packet(HEADER_ZC_EMOTION_FAIL, sizeof(struct PACKET_ZC_EMOTION_FAIL));
+	parseable_packet(HEADER_CZ_EMOTION_EXPANTION_REQ, sizeof(struct PACKET_CZ_EMOTION_EXPANTION_REQ), clif_parse_emotion_expansion_request, 0);
+	packet(HEADER_ZC_EMOTION_EXPANSION_SUCCESS, sizeof(struct PACKET_ZC_EMOTION_EXPANSION_SUCCESS));
+	packet(HEADER_ZC_EMOTION_EXPANSION_FAIL, sizeof(struct PACKET_ZC_EMOTION_EXPANSION_FAIL));
+	packet(HEADER_ZC_EMOTION_EXPANTION_LIST, -1);
+#endif
+
 #endif /* CLIF_PACKETDB_HPP */
diff --git a/src/map/emotes.cpp b/src/map/emotes.cpp
new file mode 100644
index 0000000000..d4ff877080
--- /dev/null
+++ b/src/map/emotes.cpp
@@ -0,0 +1,324 @@
+/**
+ *
+ * Copyright (C) 2023 Asheraf
+ *
+ * Hercules is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "emotes.hpp"
+
+#include "../common/conf.hpp"
+#include "../common/nullpo.hpp"
+#include "../common/random.hpp"
+#include "../common/showmsg.hpp"
+#include "../common/timer.hpp"
+#include "../common/utils.hpp"
+#include "../common/socket.hpp" // last_tick
+
+#include "battle.hpp"
+#include "clif.hpp"
+#include "log.hpp"
+#include "packets_struct.hpp"
+#include "script.hpp"
+
+#include <stdlib.h>
+
+using namespace rathena;
+
+CashEmotesDatabase cash_emotes_db;
+
+std::time_t convertToUnixTimestamp(uint64 dateValue)
+{
+    int64 year = dateValue / 10000;
+    int64 month = (dateValue % 10000) / 100;
+    int64 day = dateValue % 100;
+
+    std::tm tmStruct = {};
+    tmStruct.tm_year = year - 1900;
+    tmStruct.tm_mon = month - 1;
+    tmStruct.tm_mday = day;
+    return std::mktime(&tmStruct);
+}
+
+const std::string CashEmotesDatabase::getDefaultLocation() { return std::string(db_path) + "/cash_emotes_db.yml"; }
+
+uint64 CashEmotesDatabase::parseBodyNode(const ryml::NodeRef& node)
+{
+	int16 packId;
+	if (!this->asInt16(node, "PackId", packId))
+		return 0;
+
+	std::shared_ptr<s_cash_emotes_db> ce = this->find(packId);
+	bool exists = ce != nullptr;
+	if (!exists) {
+		ce = std::make_shared<s_cash_emotes_db>();
+		ce->packId = packId;
+	}
+
+	if (!this->asInt16(node, "PackType", ce->packType))
+		return 0;
+
+	if (!this->asInt16(node, "PackPrice", ce->packPrice))
+		return 0;
+
+	uint64 sale_start;
+	if (!this->asUInt64(node, "SaleStart", sale_start))
+		return 0;
+	ce->sale_start = !sale_start ? 0 : convertToUnixTimestamp(sale_start);
+
+	uint64 sale_end;
+	if (!this->asUInt64(node, "SaleEnd", sale_end))
+		return 0;
+	ce->sale_end = !sale_end ? 0 : convertToUnixTimestamp(sale_end);
+
+	if (!this->asUInt64(node, "RentalPeriod", ce->rental_period))
+		return 0;
+	ce->rental_period *= (60 * 60 * 24); // Convert from days to seconds
+
+	for (const ryml::NodeRef& emoteNode : node["EmotesList"]) {
+		// Get the name of the node
+		std::string emotename;
+		c4::from_chars(emoteNode.val(), &emotename);
+
+		// Get the value of the constant
+		int64 val;
+		script_get_constant(emotename.c_str(), &val);
+
+		// Verify it's a valid emotion
+		if (val < 0 || val >= ET_MAX) {
+			this->invalidWarning(node["EmotesList"], "Unknown emotion \"%s\".\n", emotename.c_str());
+			return 0;
+		}
+
+		// Append to the pack
+		ce->emoteIds.push_back(static_cast<emotion_type>(val));
+	}
+	if (!exists)
+		this->put(packId, ce);
+	return 1;
+}
+
+void emotes_use(map_session_data *sd, int16 packId, int16 emoteId)
+{
+	// ShowDebug("Processing a request to use emote %d from pack %d\n", emoteId, packId);
+	nullpo_retv(sd);
+
+	// Check if the player can use any emotes at all
+	if (battle_config.basic_skill_check != 0 && pc_checkskill(sd, NV_BASIC) < 2 && pc_checkskill(sd, SU_BASIC_SKILL) < 1) {
+		clif_emotion_fail(sd, packId, emoteId, EMSG_EMOTION_USE_FAIL_SKILL_LEVEL);
+		return;
+	}
+
+	// Verify emotes delay
+	if (sd->emotionlasttime + 1 >= time(NULL)) { // not more than 1 per second
+		sd->emotionlasttime = time(NULL);
+		clif_emotion_fail(sd, packId, emoteId, EMSG_EMOTION_EXPANTION_USE_FAIL_UNKNOWN);
+		return;
+	}
+	sd->emotionlasttime = time(NULL);
+
+	// Update idle times
+	if (battle_config.idletime_option & IDLE_EMOTION)
+		sd->idletime = last_tick;
+	if (battle_config.hom_idle_no_share && sd->hd && battle_config.idletime_hom_option & IDLE_EMOTION)
+		sd->idletime_hom = last_tick;
+	if (battle_config.mer_idle_no_share && sd->md && battle_config.idletime_mer_option & IDLE_EMOTION)
+		sd->idletime_mer = last_tick;
+
+	// Verify blocking state
+	if (sd->state.block_action & PCBLOCK_EMOTION) {
+		clif_emotion_fail(sd, packId, emoteId, EMSG_EMOTION_EXPANTION_USE_FAIL_UNKNOWN);
+		return;
+	}
+
+	// Verify the pack exists
+	auto ce = cash_emotes_db.find(packId);
+	if (ce == nullptr) {
+		clif_emotion_fail(sd, packId, emoteId, EMSG_EMOTION_EXPANTION_USE_FAIL_UNKNOWN);
+		return;
+	}
+
+	// Verify the emote exists
+	if (!util::vector_exists(ce->emoteIds, static_cast<emotion_type>(emoteId))) {
+		clif_emotion_fail(sd, packId, emoteId, EMSG_EMOTION_EXPANTION_USE_FAIL_UNKNOWN);
+		return;
+	}
+
+	// Pack 0 is freely available without needing to be purchased
+	if (ce->packId != 0) {
+		// Verify the player owns the pack or the packId is 0
+		{
+			std::string var_name = ce->packType == 1 ? "#cashemote_" : "cashemote_";
+			var_name += std::to_string(ce->packId);
+
+			int64 has_the_pack = pc_readglobalreg(sd, add_str(var_name.c_str()));
+			if (has_the_pack == 0) {
+				clif_emotion_fail(sd, packId, emoteId, EMSG_EMOTION_EXPANTION_USE_FAIL_UNPURCHASED);
+				return;
+			}
+		}
+
+		// Verify that the pack didn't expire if it has an expiration period
+		{
+			std::string var_name = ce->packType == 1 ? "#cashemoteexpire_" : "cashemoteexpire_";
+			var_name += std::to_string(ce->packId);
+
+			int64 expire_time = pc_readglobalreg(sd, add_str(var_name.c_str()));
+			if (ce->rental_period != 0 && time(NULL) > expire_time) {
+				clif_emotion_fail(sd, packId, emoteId, EMSG_EMOTION_EXPANTION_USE_FAIL_DATE);
+				return;
+			}
+		}
+	}
+
+	// Reroll the dice if the config is enabled
+	if (battle_config.client_reshuffle_dice && emoteId >= ET_DICE1 && emoteId <= ET_DICE6)
+		emoteId = rnd() % 6 + ET_DICE1;
+
+	// All good.. congrats!
+	clif_emotion_success(&sd->bl, packId, emoteId);
+}
+
+void emotes_expantion_buy(map_session_data *sd, int16 packId, int16 itemId, int8 amount)
+{
+	nullpo_retv(sd);
+
+	// Verify the item id client-hardcoded to 6909 Nyangvine_Fruit
+	if (itemId != 6909) {
+		clif_emotion_expansion_response_fail(sd, packId, EMSG_EMOTION_EXPANTION_FAIL_UNKNOWN);
+		return;
+	}
+
+	// Verify the player has the skill requirements to use emotes
+	if (battle_config.basic_skill_check != 0 && pc_checkskill(sd, NV_BASIC) < 2 && pc_checkskill(sd, SU_BASIC_SKILL) < 1) {
+		clif_emotion_expansion_response_fail(sd, packId, EMSG_EMOTION_EXPANTION_NOT_ENOUGH_BASICSKILL_LEVEL);
+		return;
+	}
+
+	// Verify the pack exists
+	auto ce = cash_emotes_db.find(packId);
+	if (ce == nullptr) {
+		clif_emotion_expansion_response_fail(sd, packId, EMSG_EMOTION_EXPANTION_FAIL_UNKNOWN);
+		return;
+	}
+
+	// Verify the amount in the packet equals the price of the pack
+	if (amount != ce->packPrice) {
+		clif_emotion_expansion_response_fail(sd, packId, EMSG_EMOTION_EXPANTION_FAIL_UNKNOWN);
+		return;
+	}
+
+	// Avoid multiple calls
+	time_t now = time(NULL);
+
+	// Verify the pack sale date has commenced
+	if (ce->sale_start != 0 && ce->sale_start > now) {
+		clif_emotion_expansion_response_fail(sd, packId, EMSG_NOT_YET_SALE_START_TIME);
+		return;
+	}
+
+	// Verify the sale end date has not passed
+	if (ce->sale_end != 0 && ce->sale_end < now) {
+		clif_emotion_expansion_response_fail(sd, packId, EMSG_EMOTION_EXPANTION_FAIL_DATE);
+		return;
+	}
+
+	// Verify the player doesn't already own the pack
+	{
+		std::string var_name = ce->packType == 1 ? "#cashemote_" : "cashemote_";
+		var_name += std::to_string(ce->packId);
+
+		int64 has_the_pack = pc_readglobalreg(sd, add_str(var_name.c_str()));
+		if (has_the_pack != 0) {
+			clif_emotion_expansion_response_fail(sd, packId, EMSG_EMOTION_EXPANTION_FAIL_ALREADY_BUY);
+			return;
+		}
+	}
+
+	if (amount > 0) {
+		// Verify the player has enough Nyangvine
+		int inv_index = pc_search_inventory(sd, itemId);
+		if (inv_index < 0 || sd->inventory.u.items_inventory[inv_index].amount < amount) {
+			clif_emotion_expansion_response_fail(sd, packId, EMSG_EMOTION_EXPANTION_NOT_ENOUGH_NYANGVINE);
+			return;
+		}
+
+		// Delete the items
+		pc_delitem(sd, inv_index, amount, 0, 0, LOG_TYPE_CONSUME);
+	}
+
+	// Give the player the pack
+	{
+		std::string var_name = ce->packType == 1 ? "#cashemote_" : "cashemote_";
+		var_name += std::to_string(ce->packId);
+
+		pc_setglobalreg(sd, add_str(var_name.c_str()), 1);
+	}
+
+	// If the pack has a rental period apply that
+	if (ce->rental_period != 0) {
+		std::string var_name = ce->packType == 1 ? "#cashemoteexpire_" : "cashemoteexpire_";
+		var_name += std::to_string(ce->packId);
+
+		int64 expire_time = now + ce->rental_period;
+		pc_setglobalreg(sd, add_str(var_name.c_str()), expire_time);
+
+		// All good, update the client with the expiry time.
+		clif_emotion_expansion_response_success(sd, packId, true, (uint32)expire_time);
+		return;
+	}
+
+	// All good.. congrats! Unlimited pack
+	clif_emotion_expansion_response_success(sd, packId, false, 0);
+}
+
+void emotes_get_player_packs(map_session_data *sd)
+{
+	nullpo_retv(sd);
+
+	std::vector<struct PACKET_ZC_EMOTION_EXPANTION_LIST_sub> packs;
+
+	// Iterate throught every pack in the database and get the player's owned packs from the variables
+	for (auto& k : cash_emotes_db) {
+		std::string var_name = k.second->packType == 1 ? "#cashemote_" : "cashemote_";
+		var_name += std::to_string(k.second->packId);
+		int64 has_the_pack = pc_readglobalreg(sd, add_str(var_name.c_str()));
+
+		std::string var_name2 = k.second->packType == 1 ? "#cashemoteexpire_" : "cashemoteexpire_";
+		var_name2 += std::to_string(k.second->packId);
+		int64 expire_time = pc_readglobalreg(sd, add_str(var_name2.c_str()));
+
+		// If the pack has already expired, remove it from the player's
+		if (has_the_pack != 0 && k.second->rental_period != 0 && time(NULL) > expire_time) {
+			pc_setglobalreg(sd, add_str(var_name.c_str()), 0);
+			pc_setglobalreg(sd, add_str(var_name2.c_str()), 0);
+			continue;
+		}
+
+		// Otherwise append to the list of available packs
+		if (has_the_pack != 0)
+			packs.push_back({ k.first, (k.second->rental_period != 0), (uint32)expire_time });
+	}
+	clif_emotion_expansion_list(sd, packs);
+}
+
+void do_init_emotes(void)
+{
+	cash_emotes_db.load();
+}
+
+void do_final_emotes(void)
+{
+	cash_emotes_db.clear();
+}
diff --git a/src/map/emotes.hpp b/src/map/emotes.hpp
new file mode 100644
index 0000000000..772180166f
--- /dev/null
+++ b/src/map/emotes.hpp
@@ -0,0 +1,76 @@
+/**
++ *
++ * Copyright (C) 2023 Asheraf
++ *
++ * Hercules is free software: you can redistribute it and/or modify
++ * it under the terms of the GNU General Public License as published by
++ * the Free Software Foundation, either version 3 of the License, or
++ * (at your option) any later version.
++ *
++ * This program is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
++ */
+#ifndef MAP_EMOTES_H
+#define MAP_EMOTES_H
+
+#include "../common/db.hpp"
+#include "../common/database.hpp"
+
+#include "pc.hpp"
+
+#include <vector>
+
+enum emotion_type;
+
+enum emote_msg : int8 {
+	EMSG_EMOTION_EXPANTION_USE_FAIL_DATE = 0,
+	EMSG_EMOTION_EXPANTION_USE_FAIL_UNPURCHASED = 1,
+	EMSG_EMOTION_USE_FAIL_SKILL_LEVEL = 2,
+	EMSG_EMOTION_EXPANTION_USE_FAIL_UNKNOWN = 3, // default
+};
+
+enum emotion_expansion_msg : int8 {
+	EMSG_EMOTION_EXPANTION_NOT_ENOUGH_NYANGVINE = 0,
+	EMSG_EMOTION_EXPANTION_FAIL_DATE = 1,
+	EMSG_EMOTION_EXPANTION_FAIL_ALREADY_BUY = 2,
+	EMSG_EMOTION_EXPANTION_FAIL_ANOTHER_SALE_BUY = 3,
+	EMSG_EMOTION_EXPANTION_NOT_ENOUGH_BASICSKILL_LEVEL = 4,
+	EMSG_NOT_YET_SALE_START_TIME = 5,
+	EMSG_EMOTION_EXPANTION_FAIL_UNKNOWN = 6, // default
+};
+
+struct s_cash_emotes_db
+{
+	int16 packId;
+	int16 packType;
+	int16 packPrice;
+	std::vector<emotion_type> emoteIds;
+	time_t sale_start;
+	time_t sale_end;
+	uint64 rental_period;
+};
+
+class CashEmotesDatabase : public TypesafeYamlDatabase<int16, s_cash_emotes_db>
+{
+public:
+	CashEmotesDatabase() : TypesafeYamlDatabase("CASH_EMOTES_DB", 1) {}
+
+	const std::string getDefaultLocation() override;
+	uint64 parseBodyNode(const ryml::NodeRef &node) override;
+};
+
+extern CashEmotesDatabase cash_emotes_db;
+
+void emotes_use(map_session_data *sd, int16 packId, int16 emoteId);
+void emotes_expantion_buy(map_session_data *sd, int16 packId, int16 itemId, int8 amount);
+void emotes_get_player_packs(map_session_data *sd);
+
+void do_init_emotes(void);
+void do_final_emotes(void);
+
+#endif /* MAP_EMOTES_H */
diff --git a/src/map/map-server-generator.vcxproj b/src/map/map-server-generator.vcxproj
index d74de78760..a43ac14d5c 100644
--- a/src/map/map-server-generator.vcxproj
+++ b/src/map/map-server-generator.vcxproj
@@ -198,6 +198,7 @@
     <ClInclude Include="date.hpp" />
     <ClInclude Include="duel.hpp" />
     <ClInclude Include="elemental.hpp" />
+    <ClInclude Include="emotes.hpp" />
     <ClInclude Include="guild.hpp" />
     <ClInclude Include="homunculus.hpp" />
     <ClInclude Include="instance.hpp" />
@@ -244,6 +245,7 @@
     <ClCompile Include="date.cpp" />
     <ClCompile Include="duel.cpp" />
     <ClCompile Include="elemental.cpp" />
+    <ClCompile Include="emotes.cpp" />
     <ClCompile Include="guild.cpp" />
     <ClCompile Include="homunculus.cpp" />
     <ClCompile Include="instance.cpp" />
diff --git a/src/map/map-server-generator.vcxproj.filters b/src/map/map-server-generator.vcxproj.filters
index 147286c910..b5a1fc199b 100644
--- a/src/map/map-server-generator.vcxproj.filters
+++ b/src/map/map-server-generator.vcxproj.filters
@@ -152,6 +152,9 @@
     <ClInclude Include="vending.hpp">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="emotes.hpp">
+      <Filter>Header Files</Filter>
+    </ClInclude>
   </ItemGroup>
   <ItemGroup>
     <ClCompile Include="achievement.cpp">
@@ -280,5 +283,8 @@
     <ClCompile Include="vending.cpp">
       <Filter>Source Files</Filter>
     </ClCompile>
+    <ClCompile Include="emotes.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
   </ItemGroup>
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/map/map-server.vcxproj b/src/map/map-server.vcxproj
index 943bc5d2f2..ed43ec0bb7 100644
--- a/src/map/map-server.vcxproj
+++ b/src/map/map-server.vcxproj
@@ -198,6 +198,7 @@
     <ClInclude Include="date.hpp" />
     <ClInclude Include="duel.hpp" />
     <ClInclude Include="elemental.hpp" />
+    <ClInclude Include="emotes.hpp" />
     <ClInclude Include="guild.hpp" />
     <ClInclude Include="homunculus.hpp" />
     <ClInclude Include="instance.hpp" />
@@ -244,6 +245,7 @@
     <ClCompile Include="date.cpp" />
     <ClCompile Include="duel.cpp" />
     <ClCompile Include="elemental.cpp" />
+    <ClCompile Include="emotes.cpp" />
     <ClCompile Include="guild.cpp" />
     <ClCompile Include="homunculus.cpp" />
     <ClCompile Include="instance.cpp" />
diff --git a/src/map/map-server.vcxproj.filters b/src/map/map-server.vcxproj.filters
index 147286c910..b5a1fc199b 100644
--- a/src/map/map-server.vcxproj.filters
+++ b/src/map/map-server.vcxproj.filters
@@ -152,6 +152,9 @@
     <ClInclude Include="vending.hpp">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="emotes.hpp">
+      <Filter>Header Files</Filter>
+    </ClInclude>
   </ItemGroup>
   <ItemGroup>
     <ClCompile Include="achievement.cpp">
@@ -280,5 +283,8 @@
     <ClCompile Include="vending.cpp">
       <Filter>Source Files</Filter>
     </ClCompile>
+    <ClCompile Include="emotes.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
   </ItemGroup>
-</Project>
+</Project>
\ No newline at end of file
diff --git a/src/map/map.cpp b/src/map/map.cpp
index 076bcc144d..302a6616bd 100644
--- a/src/map/map.cpp
+++ b/src/map/map.cpp
@@ -35,6 +35,7 @@
 #include "clif.hpp"
 #include "duel.hpp"
 #include "elemental.hpp"
+#include "emotes.hpp"
 #include "guild.hpp"
 #include "homunculus.hpp"
 #include "instance.hpp"
@@ -4907,6 +4908,7 @@ void do_final(void){
 	do_final_vending();
 	do_final_buyingstore();
 	do_final_path();
+	do_final_emotes();
 
 	map_db->destroy(map_db, map_db_final);
 
@@ -5280,6 +5282,7 @@ int do_init(int argc, char *argv[])
 	do_init_duel();
 	do_init_vending();
 	do_init_buyingstore();
+	do_init_emotes();
 
 	npc_event_do_oninit();	// Init npcs (OnInit)
 
diff --git a/src/map/packets_struct.hpp b/src/map/packets_struct.hpp
index 9f90b97321..274a217455 100644
--- a/src/map/packets_struct.hpp
+++ b/src/map/packets_struct.hpp
@@ -5702,6 +5702,77 @@ struct PACKET_ZC_DISAPPEAR_BUYING_STORE_ENTRY {
 DEFINE_PACKET_HEADER(ZC_DISAPPEAR_BUYING_STORE_ENTRY, 0x0816);
 #endif
 
+struct PACKET_CZ_REQ_EMOTION2 {
+	int16 packetType;
+	int16 packId;
+	int16 emoteId;
+} __attribute__((packed));
+DEFINE_PACKET_HEADER(CZ_REQ_EMOTION2, 0x0be9);
+
+struct PACKET_ZC_EMOTION_SUCCESS {
+	int16 packetType;
+	uint32 GID;
+	int16 packId;
+	int16 emoteId;
+} __attribute__((packed));
+DEFINE_PACKET_HEADER(ZC_EMOTION_SUCCESS, 0x0bea);
+
+struct PACKET_ZC_EMOTION_FAIL {
+	int16 packetType;
+	int16 packId;
+	int16 emoteId;
+	int8 status;
+} __attribute__((packed));
+DEFINE_PACKET_HEADER(ZC_EMOTION_FAIL, 0x0beb);
+
+struct PACKET_CZ_EMOTION_EXPANTION_REQ {
+	int16 packetType;
+	int16 packId;
+	int16 itemId; // hardcoded to 6909 see CCashEmotionMgr()
+	int8 amount;
+} __attribute__((packed));
+DEFINE_PACKET_HEADER(CZ_EMOTION_EXPANTION_REQ, 0x0bec);
+
+struct PACKET_ZC_EMOTION_EXPANSION_SUCCESS {
+	int16 packetType;
+	int16 packId;
+	int8 isRented;
+	uint32 timestamp;
+} __attribute__((packed));
+DEFINE_PACKET_HEADER(ZC_EMOTION_EXPANSION_SUCCESS, 0x0bed);
+
+struct PACKET_ZC_EMOTION_EXPANSION_FAIL {
+	int16 packetType;
+	int16 packId;
+	int8 status;
+} __attribute__((packed));
+DEFINE_PACKET_HEADER(ZC_EMOTION_EXPANSION_FAIL, 0x0bee);
+
+struct PACKET_ZC_EMOTION_EXPANTION_LIST_sub {
+	int16 packId;
+	int8 isRented;
+	uint32 timestamp;
+} __attribute__((packed));
+
+#if PACKETVER >= 20230920
+struct PACKET_ZC_EMOTION_EXPANTION_LIST {
+	int16 packetType;
+	int16 packetLength;
+	uint32 timestamp;
+	int16 timezone;
+	struct PACKET_ZC_EMOTION_EXPANTION_LIST_sub list[];
+} __attribute__((packed));
+DEFINE_PACKET_HEADER(ZC_EMOTION_EXPANTION_LIST, 0x0bf6);
+#else
+struct PACKET_ZC_EMOTION_EXPANTION_LIST {
+	int16 packetType;
+	int16 packetLength;
+	uint32 timestamp;
+	struct PACKET_ZC_EMOTION_EXPANTION_LIST_sub list[];
+} __attribute__((packed));
+DEFINE_PACKET_HEADER(ZC_EMOTION_EXPANTION_LIST, 0x0bef);
+#endif
+
 #if !defined(sun) && (!defined(__NETBSD__) || __NetBSD_Version__ >= 600000000) // NetBSD 5 and Solaris don't like pragma pack but accept the packed attribute
 #pragma pack(pop)
 #endif // not NetBSD < 6 / Solaris
diff --git a/src/map/script_constants.hpp b/src/map/script_constants.hpp
index 1dc6cc261d..1ae3fe8b08 100644
--- a/src/map/script_constants.hpp
+++ b/src/map/script_constants.hpp
@@ -4253,6 +4253,26 @@
 	export_constant(ET_YUT5);
 	export_constant(ET_YUT6);
 	export_constant(ET_YUT7);
+	export_constant(ET_CLICK_ME);
+	export_constant(ET_DAILY_QUEST);
+	export_constant(ET_EVENT);
+	export_constant(ET_JOB_QUEST);
+	export_constant(ET_TRAFFIC_LINE_QUEST);
+	export_constant(ET_CUSTOM_1);
+	export_constant(ET_CUSTOM_2);
+	export_constant(ET_CUSTOM_3);
+	export_constant(ET_CUSTOM_4);
+	export_constant(ET_CUSTOM_5);
+	export_constant(ET_CUSTOM_6);
+	export_constant(ET_CUSTOM_7);
+	export_constant(ET_CUSTOM_8);
+	export_constant(ET_CUSTOM_9);
+	export_constant(ET_CUSTOM_10);
+	export_constant(ET_CUSTOM_11);
+	export_constant(ET_CUSTOM_12);
+	export_constant(ET_CUSTOM_13);
+	export_constant(ET_CUSTOM_14);
+	export_constant(ET_CUSTOM_15);
 
 	/* emoticons deprecated */
 	export_deprecated_constant3("E_GASP", ET_SURPRISE, "ET_SURPRISE");
-- 
2.24.0.windows.1

